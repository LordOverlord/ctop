name: Build and Release ctop for master

on:
  push:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.22

      - name: Tidy up Go modules and get dependencies
        run: go mod tidy

      - name: Install Snyk CLI
        uses: snyk/actions/setup@master

      - name: Run Snyk to check Go project
        run: snyk test
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Build binaries for major platforms
        run: |
          GOOS=linux GOARCH=amd64 go build -o ctop-linux-amd64
          GOOS=darwin GOARCH=amd64 go build -o ctop-darwin-amd64
          GOOS=windows GOARCH=amd64 go build -o ctop-windows-amd64.exe

      - name: Get latest version tag
        id: get_latest_tag
        run: |
          git fetch --tags
          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "")
          echo "latest_tag=$LATEST_TAG" >> "$GITHUB_OUTPUT"

      - name: Increment version tag
        id: increment_tag
        run: |
          LATEST_TAG="${{ steps.get_latest_tag.outputs.latest_tag }}"
          if [[ "$LATEST_TAG" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR=${BASH_REMATCH[1]}
            MINOR=${BASH_REMATCH[2]}
            PATCH=${BASH_REMATCH[3]}
            PATCH=$((PATCH + 1))
            NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          else
            echo "No valid version tag found. Starting at v0.1.0"
            NEW_TAG="v0.1.0"
          fi
          echo "new_tag=$NEW_TAG" >> "$GITHUB_OUTPUT"

      - name: Create and push new tag
        run: |
          NEW_TAG=${{ steps.increment_tag.outputs.new_tag }}
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag $NEW_TAG
          git push origin $NEW_TAG

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.increment_tag.outputs.new_tag }}
          release_name: Release ${{ steps.increment_tag.outputs.new_tag }}
          draft: false
          prerelease: false

      - name: Upload Linux binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ctop-linux-amd64
          asset_name: ctop-linux-amd64
          asset_content_type: application/octet-stream

      - name: Upload macOS binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ctop-darwin-amd64
          asset_name: ctop-darwin-amd64
          asset_content_type: application/octet-stream

      - name: Upload Windows binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ctop-windows-amd64.exe
          asset_name: ctop-windows-amd64.exe
          asset_content_type: application/octet-stream
