name: Build and Release ctop for dev

on:
    push:
      branches: [ dev ]
    pull_request:
      branches: [ dev ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.18  # Specify the Go version you want to use

      - name: Tidy up Go modules and get missing dependencies
        run: |
            go mod tidy  # Clean up and download necessary dependencies

      - name: Build binary for amd64
        run: |
          GOOS=linux GOARCH=amd64 go build -o ctop-linux-amd64
          GOOS=darwin GOARCH=amd64 go build -o ctop-darwin-amd64
          GOOS=windows GOARCH=amd64 go build -o ctop-windows-amd64

      - name: Get latest version tag
        id: get_latest_tag
        run: |
          # Fetch tags and find the latest one
          git fetch --tags
          LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "Latest tag is $LATEST_TAG"
          # Set output for later steps
          echo "::set-output name=latest_tag::$LATEST_TAG"

      - name: Increment version tag
        id: increment_tag
        run: |
          # Extract the major, minor, and patch components of the version
          LATEST_TAG=${{ steps.get_latest_tag.outputs.latest_tag }}
          VERSION=$(echo $LATEST_TAG | grep -oP 'v\K\d+\.\d+\.\d+')
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          # Increment the patch version
          PATCH=$((PATCH + 1))
          NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          echo "New version tag is $NEW_TAG"
          # Set the new tag output for later steps
          echo "::set-output name=new_tag::$NEW_TAG"

      - name: Create new tag
        run: |
          NEW_TAG=${{ steps.increment_tag.outputs.new_tag }}
          echo "Creating new tag: $NEW_TAG"
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag $NEW_TAG
          git push origin $NEW_TAG

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.increment_tag.outputs.new_tag }}
          release_name: Release ${{ steps.increment_tag.outputs.new_tag }}
          draft: false
          prerelease: true  # Mark this as a pre-release since it's dev

      # Upload the Linux binary
      - name: Upload Linux amd64 binary to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}  # Use the upload URL output from the release step
          asset_path: ./ctop-linux-amd64
          asset_name: ctop-linux-amd64
          asset_content_type: application/octet-stream

      # Upload the macOS binary
      - name: Upload Darwin amd64 binary to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}  # Use the upload URL output
          asset_path: ./ctop-darwin-amd64
          asset_name: ctop-darwin-amd64
          asset_content_type: application/octet-stream

      # Upload the Windows binary
      - name: Upload Windows amd64 binary to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}  # Use the upload URL output
          asset_path: ./ctop-windows-amd64
          asset_name: ctop-windows-amd64
          asset_content_type: application/octet-stream
