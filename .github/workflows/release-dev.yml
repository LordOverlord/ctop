name: Build and Release ctop for dev

on:
    push:
      branches: [ dev ]
    pull_request:
      branches: [ dev ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.18  # Specify the Go version you want to use

      - name: Tidy up Go modules and get missing dependencies
        run: |
            go mod tidy  # Clean up and download necessary dependencies

      - name: Build binary for amd64
        run: |
          GOOS=linux GOARCH=amd64 go build -o ctop-linux-amd64
          GOOS=darwin GOARCH=amd64 go build -o ctop-darwin-amd64
          GOOS=windows GOARCH=amd64 go build -o ctop-windows-amd64

      - name: Create new tag using timestamp
        id: create_tag
        run: |
          TAG="dev-$(date +'%Y%m%d%H%M%S')"   # Create a timestamp-based tag
          echo "New tag created: $TAG"
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag $TAG
          git push origin $TAG
          echo "::set-output name=tag::$TAG"

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.tag }}  # Use the newly created tag
          release_name: Release ${{ steps.create_tag.outputs.tag }}
          draft: false
          prerelease: true  # Mark this as a pre-release since it's dev

      # Upload the Linux binary
      - name: Upload Linux amd64 binary to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}  # Use the upload URL output from the release step
          asset_path: ./ctop-linux-amd64
          asset_name: ctop-linux-amd64
          asset_content_type: application/octet-stream

      # Upload the macOS binary
      - name: Upload Darwin amd64 binary to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}  # Use the upload URL output
          asset_path: ./ctop-darwin-amd64
          asset_name: ctop-darwin-amd64
          asset_content_type: application/octet-stream

      # Upload the Windows binary
      - name: Upload Windows amd64 binary to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}  # Use the upload URL output
          asset_path: ./ctop-windows-amd64
          asset_name: ctop-windows-amd64
          asset_content_type: application/octet-stream
